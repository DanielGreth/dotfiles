#!/bin/bash
# Prints all batteries, their percentages and an emoji corresponding
# to charge status

function notify {
   dunstify -a "battery_info" -u low -h string:x-dunst-stack-tag:battery_info \
      "Battery Info: " "$1"
}

function notify_warn {
   dunstify -a "battery_low" -u critical -h string:x-dunst-stack-tag:battery_low \
      "Battery low: $capacity%
Consider plugging it in. üôÇ"
}

case "$BLOCK_BUTTON" in
   1) notify "$(acpi -b | awk -F ': |, ' '{printf "%s @ %s", $2, $3}')" ;; # Left click
#   2) ;; # Middle click
#   3) ;; # Right click
#   4) ;; # Scrollup
#   5) ;; # Scrolldown
   6) "$TERMINAL" -e "$EDITOR" "$0" ;; # Shift Left click
#   7) ;; # Shift Middle click
#   8) ;; # Shift Right click
#   9) ;; # Shift Scrollup
#   10) ;; # Shift Scrolldown
esac

. sb-theme

# Loop through all attached batteries and format the info
for battery in /sys/class/power_supply/BAT?*; do
   # If non-first battery, print a space separator.
   [ -n "${capacity+x}" ] && printf " "

   capacity="$(cat "$battery/capacity" 2>&1)"
   if [ "$capacity" -gt 90 ]; then
      status="Û∞ÇÇ "
   elif [ "$capacity" -gt 60 ]; then
      status="Û∞Åø "
   elif [ "$capacity" -gt 40 ]; then
      status="Û∞ÅΩ "
   elif [ "$capacity" -gt 10 ]; then
      status="Û∞Å∫ "
      notify_warn
   else
      status="Û∞Çé "
   fi

   # Sets up the status and capacity
   case "$(cat "$battery/status" 2>&1)" in
      Full) status="Û∞Åπ ";;
      Discharging)
         if [ "$capacity" -le 20 ]; then
            status="Û∞ö¶ $status"
            color=1
         fi
         ;;
      Charging) status="Û∞ö• $status" ;;
      "Not charging") status="Û±ü¢ " ;;
      Unknown) status="? $status" ;;
      *) exit 1 ;;
   esac

   # Prints the info
   display " $status$capacity%" "$color"
done && echo

